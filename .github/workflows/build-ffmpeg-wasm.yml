name: Build FFmpeg WebAssembly

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        optimization: ["O2", "O3", "Oz"]
      fail-fast: false

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 1

      - name: Cache Dependencies
        uses: actions/cache@v3
        with:
          path: |
            emsdk-cache
            build
            prefix
          key: ${{ runner.os }}-emscripten-${{ matrix.optimization }}-${{ hashFiles('**/*.c', '**/*.h') }}
          restore-keys: |
            ${{ runner.os }}-emscripten-${{ matrix.optimization }}-
            ${{ runner.os }}-emscripten-

      - name: Setup Emscripten
        uses: mymindstorm/setup-emsdk@v11
        with:
          version: "latest"
          actions-cache-folder: "emsdk-cache-${{ matrix.optimization }}"

      - name: Install Dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            autoconf \
            automake \
            build-essential \
            cmake \
            git \
            libass-dev \
            libtool \
            pkg-config \
            wget \
            python3 \
            nasm \
            brotli \
            wabt

      - name: Setup Build Environment
        run: |
          mkdir -p build
          mkdir -p prefix

      - name: Build x264
        run: |
          cd build
          X264_VERSION="20170226-2245-stable"
          wget https://download.videolan.org/pub/videolan/x264/snapshots/x264-snapshot-${X264_VERSION}.tar.bz2
          tar xvfj x264-snapshot-${X264_VERSION}.tar.bz2
          cd x264-snapshot-${X264_VERSION}

          # Configure x264 with emscripten
          emconfigure ./configure \
            --prefix=$GITHUB_WORKSPACE/prefix \
            --host=i686-gnu \
            --enable-static \
            --disable-cli \
            --disable-asm \
            --disable-thread \
            --disable-opencl \
            --disable-interlaced \
            --disable-avs \
            --disable-swscale \
            --disable-lavf \
            --disable-ffms \
            --disable-gpac \
            --disable-lsmash \
            --enable-pic \
            --extra-cflags="-s USE_PTHREADS=0"

          # Build and install x264
          emmake make V=1 -j$(nproc)
          emmake make install

          # Create pkg-config file manually
          mkdir -p $GITHUB_WORKSPACE/prefix/lib/pkgconfig
          cat > $GITHUB_WORKSPACE/prefix/lib/pkgconfig/x264.pc << 'EOL'
          prefix=$GITHUB_WORKSPACE/prefix
          exec_prefix=${prefix}
          libdir=${prefix}/lib
          includedir=${prefix}/include

          Name: x264
          Description: x264 library for Emscripten
          Version: 0.164.x
          Libs: -L${libdir} -lx264
          Libs.private: 
          Cflags: -I${includedir}
          EOL

          echo "=== Verifying x264 installation ==="
          ls -la $GITHUB_WORKSPACE/prefix/lib/
          ls -la $GITHUB_WORKSPACE/prefix/lib/pkgconfig/
          cat $GITHUB_WORKSPACE/prefix/lib/pkgconfig/x264.pc

      - name: Configure FFmpeg
        run: |
          cd build
          wget https://ffmpeg.org/releases/ffmpeg-6.0.tar.bz2
          tar xjf ffmpeg-6.0.tar.bz2
          cd ffmpeg-6.0

          # Set environment variables
          export PKG_CONFIG_PATH="$GITHUB_WORKSPACE/prefix/lib/pkgconfig:$PKG_CONFIG_PATH"
          export CFLAGS="-s USE_PTHREADS=0 -${{ matrix.optimization }}"
          export LDFLAGS="-L$GITHUB_WORKSPACE/prefix/lib"
          export CC="emcc"
          export CXX="em++"
          export AR="emar"
          export LD="emcc"
          export RANLIB="emranlib"

          # Verify pkg-config can find x264
          pkg-config --libs x264
          pkg-config --cflags x264

          # Configure FFmpeg
          emconfigure ./configure \
            --prefix=$GITHUB_WORKSPACE/prefix \
            --target-os=none \
            --arch=x86_32 \
            --enable-cross-compile \
            --disable-debug \
            --disable-x86asm \
            --disable-inline-asm \
            --disable-stripping \
            --disable-programs \
            --disable-doc \
            --disable-all \
            --enable-avcodec \
            --enable-avformat \
            --enable-swscale \
            --enable-avfilter \
            --enable-encoder=libx264,aac \
            --enable-decoder=h264,aac \
            --enable-demuxer=mov,matroska \
            --enable-muxer=mp4,mov \
            --enable-protocol=file \
            --enable-filter=scale \
            --enable-gpl \
            --enable-libx264 \
            --disable-runtime-cpudetect \
            --disable-pthreads \
            --disable-network \
            --disable-bzlib \
            --disable-zlib \
            --disable-iconv \
            --disable-asm \
            --pkg-config=pkg-config \
            --pkg-config-flags="--static" \
            --extra-cflags="-I$GITHUB_WORKSPACE/prefix/include" \
            --extra-ldflags="-L$GITHUB_WORKSPACE/prefix/lib" \
            --extra-libs="-lx264"

      - name: Build FFmpeg
        env:
          CFLAGS: "-${{ matrix.optimization }}"
        run: |
          cd build/ffmpeg-6.0
          emmake make -j$(nproc)

      - name: Compile to WebAssembly
        run: |
          cd build/ffmpeg-6.0
          emcc -${{ matrix.optimization }} \
            -s WASM=1 \
            -s TOTAL_MEMORY=33554432 \
            -s ALLOW_MEMORY_GROWTH=1 \
            -s MODULARIZE=1 \
            -s EXPORT_ES6=1 \
            -s SINGLE_FILE=1 \
            -s ENVIRONMENT='web,worker' \
            --closure 1 \
            -s NO_FILESYSTEM=1 \
            -s NO_EXIT_RUNTIME=1 \
            -s EXPORTED_RUNTIME_METHODS='["cwrap", "setValue", "getValue"]' \
            -o ffmpeg-${{ matrix.optimization }}.js \
            ffmpeg.bc

      - name: Optimize WebAssembly
        run: |
          cd build/ffmpeg-6.0
          wasm-strip ffmpeg-${{ matrix.optimization }}.wasm || true
          if command -v wasm-opt &> /dev/null; then
            wasm-opt -${{ matrix.optimization }} --enable-simd -o ffmpeg-${{ matrix.optimization }}.opt.wasm ffmpeg-${{ matrix.optimization }}.wasm || true
          else
            cp ffmpeg-${{ matrix.optimization }}.wasm ffmpeg-${{ matrix.optimization }}.opt.wasm
          fi
          brotli -o ffmpeg-${{ matrix.optimization }}.wasm.br ffmpeg-${{ matrix.optimization }}.opt.wasm

      - name: Upload Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ffmpeg-wasm-${{ matrix.optimization }}
          path: |
            build/ffmpeg-6.0/ffmpeg-${{ matrix.optimization }}.js
            build/ffmpeg-6.0/ffmpeg-${{ matrix.optimization }}.opt.wasm
            build/ffmpeg-6.0/ffmpeg-${{ matrix.optimization }}.wasm.br
          retention-days: 7

      - name: Report Size
        run: |
          cd build/ffmpeg-6.0
          echo "FFmpeg ${{ matrix.optimization }} build sizes:"
          echo "Original WASM size:"
          ls -lh ffmpeg-${{ matrix.optimization }}.wasm || true
          echo "Optimized WASM size:"
          ls -lh ffmpeg-${{ matrix.optimization }}.opt.wasm || true
          echo "Compressed (BR) size:"
          ls -lh ffmpeg-${{ matrix.optimization }}.wasm.br || true
